// <auto-generated />
using System;
using GeoProject.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GeoProject.Migrations
{
    [DbContext(typeof(database))]
    partial class databaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GeoProject.Models.AreaModel", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AreaId"));

                    b.Property<string>("AreaType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("AreaId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("GeoProject.Models.ElectrodeModel", b =>
                {
                    b.Property<int>("ElectrodeCoordinateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ElectrodeCoordinateId"));

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ElectrodeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("ElectrodeCoordinateId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ElectrodesCoordinates");
                });

            modelBuilder.Entity("GeoProject.Models.GeologicalInformationModel", b =>
                {
                    b.Property<int>("GeologicalInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeologicalInformationId"));

                    b.Property<string>("Composition")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("CracksPresent")
                        .HasColumnType("bit");

                    b.Property<double>("Porosity")
                        .HasColumnType("float");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("RockType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GeologicalInformationId");

                    b.HasIndex("ProfileId");

                    b.ToTable("GeologicalInformation");
                });

            modelBuilder.Entity("GeoProject.Models.MeasurementMetadataModel", b =>
                {
                    b.Property<int>("MeasurementMetadataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeasurementMetadataId"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EquipmentParameters")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MeasurementConditions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.HasKey("MeasurementMetadataId");

                    b.HasIndex("ProfileId");

                    b.ToTable("MeasurementMetadata");
                });

            modelBuilder.Entity("GeoProject.Models.ProfileModel", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProfileId");

                    b.HasIndex("AreaId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("GeoProject.Models.ProjectModel", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("GeoProject.Models.UserModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("AccessRights")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GeoProject.Models.AreaModel", b =>
                {
                    b.HasOne("GeoProject.Models.ProjectModel", "Project")
                        .WithMany("Areas")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("GeoProject.Models.ElectrodeModel", b =>
                {
                    b.HasOne("GeoProject.Models.ProfileModel", "Profile")
                        .WithMany("Electrode")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("GeoProject.Models.GeologicalInformationModel", b =>
                {
                    b.HasOne("GeoProject.Models.ProfileModel", "Profile")
                        .WithMany("GeologicalInformation")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("GeoProject.Models.MeasurementMetadataModel", b =>
                {
                    b.HasOne("GeoProject.Models.ProfileModel", "Profile")
                        .WithMany("MeasurementMetadata")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("GeoProject.Models.ProfileModel", b =>
                {
                    b.HasOne("GeoProject.Models.AreaModel", "Area")
                        .WithMany("Profiles")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("GeoProject.Models.UserModel", b =>
                {
                    b.HasOne("GeoProject.Models.ProjectModel", "Project")
                        .WithMany("Users")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("GeoProject.Models.AreaModel", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("GeoProject.Models.ProfileModel", b =>
                {
                    b.Navigation("Electrode");

                    b.Navigation("GeologicalInformation");

                    b.Navigation("MeasurementMetadata");
                });

            modelBuilder.Entity("GeoProject.Models.ProjectModel", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
